import React, { PropsWithChildren, ButtonHTMLAttributes } from 'react';

/**
 * Component properties with test identifier.
 * @param {string} [testId] - Optional. A testing library identifier.
 */
interface PropsWithTestId {
    testId?: string;
}
/**
 * Component properties with CSS class name(s).
 * @param {string} [className] - Optional. CSS class names.
 */
interface PropsWithClassName {
    className?: string;
}
/**
 * Utility interface combining the most commonly used React component
 * properties interfaces.
 * @see {@link PropsWithClassName}
 * @see {@link PropsWithTestId}
 */
interface BaseComponentProps extends PropsWithClassName, PropsWithTestId {
}

/**
 * The `AlertVariant` enumerates types of Alerts.
 */
declare enum AlertVariant {
    Error = "Error",
    Info = "Info",
    Success = "Success",
    Warning = "Warning"
}
/**
 * Properties for the `Alert` component.
 * @param {AlertVariant} [variant] - Optional. The type of Alert. Default: `Info`
 * @see {@link PropsWithChildren}
 * @see {@link PropsWithClassName}
 * @see {@link PropsWithTestId}
 */
interface AlertProps extends PropsWithChildren, PropsWithClassName, PropsWithTestId {
    variant?: AlertVariant;
}

/**
 * The `Alert` React component formats and renders a styled message. Use the
 * `variant` property to apply predefined styles.
 * @param {AlertProps} props - Component properties, `AlertProps`.
 * @returns {JSX.Element} JSX
 */
declare const Alert: React.FC<AlertProps>;

/**
 * The `ButtonVariant` enumerates types of Buttons.
 */
declare enum ButtonVariant {
    Solid = "Solid",
    Outline = "Outline",
    Text = "Text"
}
/**
 * Properties for the `Button` component.
 * @param {ButtonVariant} [variant] - Optional. The type of Button. Default: `Primary`
 * @see {@link ButtonHTMLAttributes}
 * @see {@link PropsWithTestId}
 */
interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement>, PropsWithTestId {
    variant?: ButtonVariant;
}

/**
 * The `Button` React componentformats and renders a styled button.
 * @param {ButtonProps} props - Component properties, `ButtonProps`.
 * @returns {JSX.Element} JSX
 */
declare const Button: React.FC<ButtonProps>;

/**
 * ISO 4217 Currency Codes
 * @see {@link https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes | ISO 4217 Currency Codes}
 */
declare enum CurrencyCode {
    CAD = "CAD",// Canadian Dollar
    EUR = "EUR",// Euro
    GBP = "GBP",// Pound sterling (Great Britian)
    MXN = "MXN",// Mexican Peso
    USD = "USD"
}
/**
 * Possible `currencyDisplay` values to use with `Intl.NumberFormat`.
 * Default: `symbol`.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options | NumberFormatOptions}
 */
declare enum CurrencyDisplay {
    Code = "code",
    Name = "name",
    NarrowSymbol = "narrowSymbol",
    Symbol = "symbol"
}
/**
 * Possible `currencySign` values to use with `Intl.NumberFormat`.
 * Default: `standard`.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options | NumberFormatOptions}
 */
declare enum CurrencySign {
    Accounting = "accounting",
    Standard = "standard"
}
/**
 * Possible `signDisplay` values to use with `Intl.NumberFormat`. By default,
 * display sign for negative numbers only, including negative zero. Default: `auto`.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options | NumberFormatOptions}
 */
declare enum SignDisplay {
    Auto = "auto",
    Always = "always",
    ExceptZero = "exceptZero",
    Never = "never"
}
/**
 * Possible `unit` values to use with "unit" formatting style using `Intl.NumberFormat`.
 * @see {@link https://tc39.es/ecma402/#table-sanctioned-single-unit-identifiers | ECMA Units of Measurement }
 */
declare enum Unit {
    Celsius = "celsius",
    Centimeter = "centimeter",
    Fahrenheit = "fahrenheit",
    Inch = "inch",
    Kilometer = "kilometer",
    KilometerPerHour = "kilometer-per-hour",
    Mile = "mile",
    MilePerHour = "mile-per-hour",
    Millimeter = "millimeter",
    Percent = "percent"
}
/**
 * Possible `unitDisplay` values to use with "unit" formatting style using
 * `Intl.NumberFormat`. Default: `short`, e.g. "10 cm".
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options | NumberFormatOptions}
 */
declare enum UnitDisplay {
    Long = "long",
    Narrow = "narrow",
    Short = "short"
}

/**
 * Properties for the `Currency` component.
 * @param {CurrencyCode} [currency] - Optional. The ISO 4217 currency code. Default: `USD`.
 * @param {CurrencyDisplay} [currencyDisplay]  - Optional. How the currency is displayed. Default: `symbol`.
 * @param {CurrencySign} [currencySign] - Optional. How negative values are displayed. Default: `standard`.
 * @param {number} value - The amount.
 * @see {@link PropsWithClassName}
 * @see {@link PropsWithTestId}
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options | NumberFormatOptions}
 */
interface CurrencyProps extends PropsWithClassName, PropsWithTestId {
    currency?: CurrencyCode;
    currencyDisplay?: CurrencyDisplay;
    currencySign?: CurrencySign;
    value: number;
}

/**
 * The `Currency` React component formats and renders a currency value.
 * @param {CurrencyProps} props - Component properties.
 * @returns {JSX.Element} JSX
 */
declare const Currency: React.FC<CurrencyProps>;

/**
 * The `DateFormat` enumerates patterns for formatting dates.
 */
declare enum DateFormat {
    DATE = "MM/DD/YYYY",
    DAY_OF_WEEK = "dddd",
    HOURS_AND_MINUTES = "H[h] mm[m]",
    TIME = "h:mma",
    TIMESTAMP_SHORT = "h:mma ddd MMM D",
    TIMESTAMP = "dddd MMMM D [at] h:mma"
}
/**
 * Properties for the `Date` component.
 * @param {string|number} date - The date value expressed as an ISO 8601 date string or as a number of milliseconds.
 * @param {DateFormat} [format] - Optional. The format of the Date. Default: `DATE`
 * @see {@link PropsWithClassName}
 * @see {@link PropsWithTestId}
 * @see {@link https://en.wikipedia.org/wiki/ISO_8601 | ISO 8601}
 */
interface DateProps extends PropsWithClassName, PropsWithTestId {
    date: string | number;
    format?: DateFormat;
}

/**
 * The `Date` React component formats and renders a date. Use the `format`
 * property to apply a pattern to format the date.
 * @param {Date} props - Component properties, `DateProps`.
 * @returns {JSX.Element} JSX
 */
declare const Date: React.FC<DateProps>;

/**
 * Properties for the `DayOfTheWeek` component.
 * @param {string|number} date - The date value expressed as an ISO 8601 date string or as a number of milliseconds.
 * @param {boolean} [relative] - Optional. Indicates if the day of the week should be expressed relative to the current day, i.e. `Yesterday`, `Today`, `Tomorrow`.
 * @see {@link PropsWithClassName}
 * @see {@link PropsWithTestId}
 * @see {@link https://en.wikipedia.org/wiki/ISO_8601 | ISO 8601}
 */
interface DayOfTheWeekProps extends PropsWithClassName, PropsWithTestId {
    date: string | number;
    relative?: boolean;
}

/**
 * The `DayOfTheWeek` React component renders the day of the week,
 * e.g. `Monday`, for the supplied date value.
 * @param {DayOfTheWeekProps} props - Component properties, `DayOfTheWeekProps`.
 * @returns {JSX.Element} JSX
 */
declare const DayOfTheWeek: React.FC<DayOfTheWeekProps>;

/**
 * Properties for the `Decimal` component.
 * @param {number} [minimumFractionDigits] - Optional. The minimum number of fraction digits to use. Default: `0`
 * @param {number} [maximumFractionDigits] - Optional. The maximum number of fraction digits to use. Default: the larger of `minimumFractionDigits` and `0`
 * @param {SignDisplay} [signDisplay] - Optional. When to display the sign for the number. Default: `auto`
 * @param {Unit} [unit] - Optional. When included, formatted value includes unit of measurement.
 * @param {UnitDisplay} [unitDisplay] - Optional. Display of the unit of measurement. Default: `short`
 * @param {number} value - The decimal value, e.g. `0.34` renders: 0.34
 * @see {@link PropsWithClassName}
 * @see {@link PropsWithTestId}
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options | NumberFormatOptions}
 */
interface DecimalProps extends PropsWithClassName, PropsWithTestId {
    maximumFractionDigits?: number;
    minimumFractionDigits?: number;
    signDisplay?: SignDisplay;
    unit?: Unit;
    unitDisplay?: UnitDisplay;
    value: number;
}

/**
 * The `Decimal` React component formats and renders a decimal number.
 * @param {DecimalProps} props - Component properties.
 * @returns {JSX.Element} JSX
 */
declare const Decimal: React.FC<DecimalProps>;

/**
 * Properties for the `Integer` component.
 * @param {SignDisplay} [signDisplay] - Optional. When to display the sign for the number. Default: `auto`
 * @param {Unit} [unit] - Optional. When included, formatted value includes unit of measurement.
 * @param {UnitDisplay} [unitDisplay] - Optional. Display of the unit of measurement. Default: `short`
 * @param {number} value - The integer value, e.g. `100`.
 * @see {@link PropsWithClassName}
 * @see {@link PropsWithTestId}
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options NumberFormatOptions}
 */
interface IntegerProps extends PropsWithClassName, PropsWithTestId {
    signDisplay?: SignDisplay;
    unit?: Unit;
    unitDisplay?: UnitDisplay;
    value: number;
}

/**
 * The `Integer` React component formats and renders an integer number.
 * @param {IntegerProps} props - Component properties.
 * @returns {JSX.Element} JSX
 */
declare const Integer: React.FC<IntegerProps>;

/**
 * Properties for the `Percent` component.
 * @param {number} [minimumFractionDigits] - Optional. The minimum number of fraction digits to use. Default: `0`
 * @param {number} [maximumFractionDigits] - Optional. The maximum number of fraction digits to use. Default: the larger of `minimumFractionDigits` and `0`
 * @param {SignDisplay} [signDisplay] - Optional. When to display the sign for the number. Default: `auto`
 * @param {number} value - The percent as a decimal value, e.g. `0.34` renders 34%.
 * @see {@link PropsWithClassName}
 * @see {@link PropsWithTestId}
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options NumberFormatOptions}
 */
interface PercentProps extends PropsWithClassName, PropsWithTestId {
    maximumFractionDigits?: number;
    minimumFractionDigits?: number;
    signDisplay?: SignDisplay;
    value: number;
}

/**
 * The `Percent` React component formats and renders a percent value.
 * @param {PercentProps} props - Component properties.
 * @returns {JSX.Element} JSX
 */
declare const Percent: React.FC<PercentProps>;

/**
 * The `TextVariant` enumerates types of Text. Use the `variant` property
 * to specify the desired format.
 */
declare enum TextVariant {
    Heading1 = "Heading1",
    Heading2 = "Heading2",
    Heading3 = "Heading3",
    BodyCopy = "BodyCopy"
}
/**
 * Properties for the `Text` component.
 * @param {TextVariant} [variant] - Optional. The type of Text. Default: `BodyCopy`
 */
interface TextProps extends PropsWithChildren, PropsWithClassName, PropsWithTestId {
    variant?: TextVariant;
}

/**
 * The `Text` React component formats and renders a text value. Use the
 * `variant` property to apply predefined styles.
 * @param {TextProps} props - Component properties.
 * @returns {JSX.Element} JSX
 */
declare const Text: React.FC<TextProps>;

export { Alert, type AlertProps, AlertVariant, type BaseComponentProps, Button, type ButtonProps, ButtonVariant, Currency, CurrencyCode, CurrencyDisplay, type CurrencyProps, CurrencySign, Date, DateFormat, type DateProps, DayOfTheWeek, type DayOfTheWeekProps, Decimal, type DecimalProps, Integer, type IntegerProps, Percent, type PercentProps, type PropsWithClassName, type PropsWithTestId, SignDisplay, Text, type TextProps, TextVariant, Unit, UnitDisplay };
